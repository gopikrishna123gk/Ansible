1) What is Configuration Management?

   to systematically manage, maintain, and control the configuration of software,
   hardware, and infrastructure in a consistent and efficient manner it includes
      *) Consistent
      *) Documented
      *) Traceable
      *) Repeatable
      *) Compliant
   
2) How does Ansible work?

   Ansible is a combination of multiple pieces working together to become an automation tool. 
   Mainly these are modules, playbooks, and plugins.
   1) Modules:- these are small codes that will get executed. There are multiple inbuilt modules that 
                serve as a starting point for building tasks.
   2) Playbooks:- itcontain plays which further is a group of tasks. This is the place to define
                  the workflow or the steps needed to complete a process
   3) Plugins:- these are special kinds of modules that run on the main control machine for logging purposes.
                There are other types of plugins also.

3) features of Ansible?

   It has the following features:-
   *) Agentless :– Unlike puppet (or) chef there is no software (or) agent managing the nodes.
   *) Python :– Built on top of python which is very easy to learn and write scripts and one of the robust 
                programming languages.
   *) SSH :– Passwordless network authentication which makes it more secure and easy to set up.
   *) Push architecture :– The core concept is to push multiple small codes to the configure and run the action
                           on client nodes.
   *) Setup :– This is very easy to set up with a very low learning curve and any open source so that anyone 
               can get hands-on.
   *) Manage Inventory :– Machines’ addresses are stored in a simple text format and we can add different sources 
                          of truth to pull the list using plugins.

4) Explain Infrastructure as Code?

  *) it involves managing and provisioning infrastructure (e.g., servers, networks, storage, and other components)
     using code and automation. Instead of manually configuring and provisioning infrastructure.
  *) IaC allows you to define and maintain your infrastructure as code in a version-controlled format.


5) Explain Ansible galaxy?

   *) it is a web-based platform and community hub for sharing, finding, and collaborating on Ansible content.
   *) it provides a central repository and a set of tools to help Ansible users discover, reuse, and collaborate on
      these content resources.

6) Explain modules in Ansible?

    *) They are the building blocks of Ansible automation, allowing you to execute various operations, from system 
       configuration and package management to file manipulation and cloud resource provisioning.
    *) it simplify's the automation process by providing a consistent interface to manage different systems and services
    *) Ansible modules are a fundamental component of Ansible automation, enabling you to perform a wide range of tasks
       across your infrastructure efficiently and consistently.

7)  What are Ansible tasks?

    *) Ansible tasks are the individual units of work within an Ansible playbook. Each task defines a specific action
       (or) operation that Ansible should perform on the target system(s) when the playbook is executed.
    *) Tasks are executed in order, and they encapsulate the work required to achieve the desired state of the system,
       often using Ansible modules.

8) Ansible Playbooks vs Roles?

  *) Roles:-	
   1) Roles are reusable subsets of a play.	.
   2) A set of tasks for accomplishing a certain role.	
       Example:- webservers, group of servers	

*) Playbooks:-
   1) Playbooks contain Plays
   2) Mapps among hosts and roles.
      Example: site.yml, gkservers.yml, webservers.yml.

9)  advantages of using Ansible?

    The main advantages of using this tool are
      1) Agentless
      2) Very low overhead
      3) Good performance.

10) can we create reusable content with Ansible?

    Yes, Ansible has the concept of roles that helps to create reusable content
       here  role directory structure:-

my_roles/
├── defaults/
│   └── main.yml
├── files/
├── handlers/
│   └── main.yml
├── meta/
│   └── main.yml
├── tasks/
│   └── main.yml
├── templates/
├── tests/
├── vars/
│   └── main.yml
└── README.md

11) How to create a empty file in Ansible?

   *) To create an empty file, Ansible uses a file module.
   *) first we need to create a playbook with the name of this is_empty_file.yml
---
- name: this is an empty file
  hosts: dev_target_host
  tasks:
    - name: this is an empty file
      file:
        path: /path/to/dev/empty_file.txt
        state: touch
  *) run the playbook 
     $ ansible-playbook -i inventory.ini this is_empty_file.yml

 12) How will you set the environment variable or any path for a task or entire playbook?

   *)  using environment variables in Ansible provides a way to make your playbooks more flexible,
       customizable, and secure. 
   *) It allows you to separate configuration data from the playbook code, 
      making it easier to manage and maintain your automation tasks.

 13) Can we manage Windows Nano Server using Ansible?

     No, it is not possible to manage Windows Nano Server using Ansible as it doesn't have full access  
     to the .Net framework, which is primarily used by internal components and modules

 14)  How do you access Shell Environment Variables?

   *) If you are just looking to access the existing variables then you can use the 
     -“env” lookup plugin.
     For example:-
       Accessing the value of Home environment variable on the management machine:
           $ local_home:”{{lookup(‘env’,’HOME’)}}”

 15) Is it possible to increase the Ansible reboot module to more than 600 seconds?

    Yes, it is possible to increase the Ansible reboot module to specific values using the
    below syntax
     - name: Reboot a Linux system 
       reboot:
       reboot_timeout: 1000

     ex playbook:-

- name: Reboot the system
  command: "reboot"
  async: 1
  poll: 0
  ignore_errors: yes

- name: Wait for the system to come back online
  wait_for_connection:
    timeout: 1800  # Adjust the timeout to your desired value (in seconds)
                     ex:- 600
  delegate_to: localhost

  16)  How can you use docker modules in Ansible?

      *) Docker modules require docker-py installed on the host running Ansible. 
           $ pip install 'docker-py>=1.7.0'
      *) The docker_service module also requires docker-compose
           $ pip install 'docker-compose>=1.7.0'

  17)  Explain how you will copy files recursively onto a target host?

     *)  you can use the copy module along with the # with_filetree lookup plugin
     *) If you have to copy files for a large number of files, then the synchronizing module
        is the best choice for it.
           - synchronize:
         src: /first/absolute/path
         dest: /second/absolute/path
         delegate_to: "{{ inventory_hostname }}"
    *)Create an Ansible playbook (e.g., copy_files.yml) t
---
- name: Copy files recursively to target host
  hosts: your_target_host
  tasks:
    - name: Copy files recursively
      copy:
        src: /path/to/local/source
        dest: /path/to/remote/destination
      with_filetree: /path/to/local/source
 *) run the playbook
   $ ansible-playbook -i inventory.ini copy_files.yml

18) How can you disable cowsay?

  *) If cowsay is installed then executing your playbooks within Ansible is very smooth.
  *) Even if you think that you want to work in a professional cow free environment, then you
     will have two options:
       Uninstall cowsay
       Setting up value for the environment variable, like below
        $ Export ANSIBLE_NOCOWS=1

 19)  How can you access a list of Ansible_Variables?

   *) By default, Ansible gathers facts under machines under management. Further, these facts are
      accessed in Playbooks and in templates. One of the best ways to view a list of all the facts
      that are available in a machine, then need to run the setup module in the ad-hoc way
        $ Ansible- m setup hostname

20) How can you see all the variables specific to my host?

   *) To see all the host-specific variables, that include all facts and other resources are:
        $ Ansible - m debug- a “var=hostvars[‘hostname’]” localhost
    ex:-$ Ansibe - m debug- a "var=hostvars[dev]" localhost

 21) You have an ansible playbook that configures a server with a specific package. You want to run
     the playbook on a group of servers, but you want to skip the task that installs the package on
     a specific server. How would you do this?

    *) To skip a task for a specific host, you can use the --limit option and specify the hostname (or)
       pattern to match the host you want to skip.
          $ Ansible-playbook --limit '!server1' playbook.yml
      ex:-$ Ansible-playbook --limit '!dev' dev_playbook.yml

 22) You have an ansible playbook that installs and configures a web server. You want to run the playbook, 
     but you want to test the changes before making them. How would you do this?

    *) To test the changes made by an ansible playbook without making any actual changes, you can use 
       the "--check flag". This will perform a "dry run" of the playbook and report any changes that would
       be made, but it will not actually make any changes on the target hosts.
         $ Ansible-playbook --check playbook.yml
     ex:-$ Ansible-playbook --check gk_playbook.yml

  23) You have an ansible playbook that installs and configures a database server. You want to run the playbook,
      but you want to make it so that any failures will be ignored, and the playbook will continue to run. How
      would you do this?

     *) To ignore failures and continue running the playbook, you can use the "--force-handlers flag". This will 
        cause ansible to continue running the playbook even if a task fails, and it will run any handlers
        (tasks that are triggered by other tasks) that were registered for the failed tasks.
          $ Ansible-playbook --force-handlers playbook.yml
      ex:-$ Ansible-playbook --force-handlers gk_playbook.yml

  24) You have an ansible playbook that installs and configures a load balancer. You want to run the playbook, but
      you want to make it so that any tasks that would change the target hosts will be skipped. How would you do this?

     *) To skip tasks that would make changes to the target hosts, you can use the "--diff flag". This will perform a
        "dry run" of the playbook and report any changes that would be made, but it will skip any tasks that would 
         make actual changes on the target hosts.
          $ Ansible-playbook --diff playbook.yml
      ex:-$ Ansible-playbook --diff gk_playbook.yml

 25)  You have an ansible playbook that installs and configures a monitoring system. You want to run the playbook,
      but you want to make it so that any tasks that are not idempotent (i.e., tasks that cannot be run multiple
      times without causing harm) will be skipped. How would you do this?

     *) To skip non-idempotent tasks, you can use the --skip-tags flag and specify the tag or tags for the tasks
        you want to skip.
          $ Ansible-playbook --skip-tags non_idempotent playbook.yml
      ex:-$ Ansible-playbook --skip-tags non_idempotent gk_playbook.yml

 26) You have an ansible playbook that installs and configures a file server. You want to run the playbook, but you
     want to make it so that any tasks that are not relevant to the target hosts will be skipped. How would you do this?

     *) To skip tasks that are not relevant to the target hosts, you can use the "--skip-tags flag" and specify the 
        tag (or) tags for the tasks you want to skip.
          $ Ansible-playbook --skip-tags '!file_server' playbook.yml
      ex:-$ Ansible-playbook --skip-tags  'dev_server' gk_playbook.yml

 27) You want to run a shell command on all of the servers in your inventory. How would you do this using ansible?

      *) You can use the command module to run a shell command on all of the servers in your inventory.
        - name: Run shell command
          hosts: all
          tasks:
          - name: Run command
            command: echo hello

 28) You want to copy a file from your local machine to all of the servers in your inventory. How would you do this
     using ansible?

    *) You can use the copy module to copy a file from your local machine to all of the servers in your inventory.

- name: Copy file
  hosts: all
  tasks:
    - name: Copy file
      copy:
        src: /path/to/local/file
        dest: /path/on/dev/server

 29) You want to install a package on all of the servers in your inventory using the package manager for the target 
     operating system. How would you do this using ansible?

   *) You can use the package module to install a package on all of the servers in your inventory using the package
      manager for the target operating system.

- name: Install package
  hosts: all
  tasks:
    - name: Install package
      package:
        name: nginx

 30) You want to create a user on all of the servers in your inventory. How would you do this using ansible?

    *) You can use the user module to create a user on all of the servers in your inventory.

- name: Create user
  hosts: all
  tasks:
    - name: Create user
      user:
        name: gk
        password: $6$rounds=656000$somesalt$encryptedpassword

 31) reusability in ansible?

   *) Ansible playbook files can be reused in multiple ways. Imports and Include are helpful to create/break up 
      multiple small files of a massive playbook. Roles are primarily used to manage various tasks in a package 
      including handlers, variables, plug-in and other modules. They can also be uploaded and shared by Ansible Galaxy.
      Ansible Tower automatically fetches the roles that playbook needs from Galaxy, GitHub, or your local source control.

 32) Modules in Ansible?

  *) Ansible works by connecting to the remote nodes over SSH and pushing out small programs, called 'modules' to them.
    These programs are written to be resource models of the desired state of the system. Ansible then executes these 
    modules and removes them when finished. 
 *) Ansible ships with a number of readymade modules (called the 'module library') that can be executed directly on 
    remote hosts or through Playbooks. Users can also write their own modules. These modules can control system resources,
    like services, packages, (or) files, (or) handle executing system commands.

33) Facts in ansible?

  *) Whenever we run an Ansible playbook, Ansible first gathers information ('facts' an exhaustive list of all the 
     environment details) about each host in the play.
  *) it can be extremely helpful when we’re running playbooks; we can use gathered information like host IP addresses, 
     CPU type, disk space, operating system information, and network interface information to change when certain tasks
     are run or to change certain information used in configuration files.

 34) Handler in Ansible?

   *) Handlers are just like regular tasks in a playbook, but they will only be run if a task notifies the handler. If a
      task that would’ve notified the handlers is skipped due to a when condition (or) something of the like, the handler
      will not be run.
   *) Handlers are automatically loaded from roles/<role_name>/handlers/main.yaml.
   *) Handlers will run once, and only once, after all of the tasks complete in a particular play.

 35) Task in Ansible?

  *) At a basic level, a task is a way to call an Ansible module. In playbook goal of a play is to map a group of hosts
     to some well-defined roles, represented by things Ansible calls tasks. 
 *)  The task file is the main part of a role. If roles/<role_name>/tasks/main.yaml exists, all the tasks therein and 
     any other files it includes will be embedded in the play and executed. 

 36) Variables in Ansible?

   *) There are two 2 types of variables that can be defined in a role
     1) Role variables:- loaded from roles/<role_name>/vars/main.yaml 
     2) Role defaults:- which are loaded from roles/<role_name>/defaults/main.yaml 
      *) The difference between 'variables' and 'defaults' is the precedence order.
      *)  Role defaults are the lowest order variables. Any other definition of a variable will take precedence over a
          role default.

 37) Meant by Tags in Ansible?

   *)  If we have a large playbook, it may become useful to be able to run only a specific part of it rather than running 
       everything in the whole Ansible playbook, Ansible supports a "tags:" attribute for this. 
   *)  When we execute a playbook, we can filter tasks based on 'tags' in two ways: 
   *)  On the command line, with the "--tags" (or) "--skip-tags" options 
   *) In Ansible configuration settings, with the "TAGS_RUN" and "TAGS_SKIP" options.













